#   Minimum Kapsayan Ağaçlar

.fx: first

Azhar MURZAEVA


`ALGORİTMALAR`

Öğretmen: Nurettin ŞENYER

Mayıs 2016

![Çizge Örneği](r.png)

---

###İçerik
- Graph(Çizge) nedir?
- Ağaç nedir?
- Kullanılan alanlar
- Minimum Kapsayan Ağaçlar nedir?
- Prim Algoritması
- Kruskal Algoritması




###Graph(Çizge) nedir?

- `Çizge` veya `Graf`, düğümler ve bu düğümleri birbirine bağlayan kenarlardan oluşan bir tür ağ yapısıdır. Örnek bir çizge:

<img src="pics/g.png" width=300 height=170>





###Ağaç(Tree) Nedir?

- Eğer ki, graf bağlı bir graf ise ve bu graf hiç döngü içermiyorsa, bu graf türüne Ağaç denmektedir. Örnek bir Ağaç:

<img src="pics/a.svg" >

- Ağaçlar bir çok nedenden dolayı graf teorisi içerisinde önemli bir yere sahiptir. Ayrıca, ağaçlar graf teorisinin birçok uygulamasında ön plana çıkmaktadır.


###Kullanılan Alanlar

- Matematikte
- Fizikte
- Biyolojide
- Örneğin, bilgisayar bilimcileri, hiyerarşik veritabanı kullanarak belirli tipteki verilerin depolanma ve düzenlenme uygulamasını, ağaçları kullanarak gerçekleştirmişlerdir.
- Bunlara ek olarak, sıralama, kodlama teorisi ve bazı optimizasyon problemlerinin incelenmesinde de ağaçlar kullanılmaktadır. 




###Minimum Kapsayan Ağaç Nedir?

- Ağırlıklı bir grafta(weighted graph), yani birbirleri ile bağlantılı olan bütün düğümlerin yollarının maaliyetleri olan bir grafta, bütün düğümleri en kısa yol vercek şekilde dolaşan(kapsayan) bir ağaçtır.

<img src="pics/mst.png" width=400 height=284>

- Örneğin, hava yollarını en az maaliyetli şekilde ve döngüsüz olacak şekilde oluşturulmasında kullanılmaktadır.
- Aynı şekilde şehirler arasında kara yolları oluşturmakta kullanılmaktadır. Örneğin, maaliyet olarak da dağlar, ırmaklar vs. göz önüne alınmaktadır. 

####Minimum Kapsayan Ağaç

- Bir çizge(graf) birçok kapsayan ağacı içerebilir. Örneğin, 
4 düğümlü bir çizge 16 tane kapsayan ağaca sahiptir:
<table>
<tr>
<td><img src="pics/gnm1.png" style="float: left"><p></td>

<td><img src="pics/gnm2.png" style="float: left"></td>

<td><img src="pics/gnm3.png" style="float: left"></td>

<td><img src="pics/gnm4.png" style="float: left"></td>
</tr>
<tr>
<td><img src="pics/gnm5.png" style="float: left"></td>

<td><img src="pics/gnm6.png" style="float: left"></td>

<td><img src="pics/gnm7.png" style="float: left"></td>

<td><img src="pics/gnm8.png" style="float: left"></td>
</tr>
<tr>
<td><img src="pics/gnm9.png" style="float: left"></td>

<td><img src="pics/gnm10.png" style="float: left"></td>

<td><img src="pics/gnm11.png" style="float: left"></td>

<td><img src="pics/gnm12.png" style="float: left"></td>
</tr>
<tr>
<td><img src="pics/gnm13.png" style="float: left"></td>

<td><img src="pics/gnm14.png" style="float: left"></td>

<td><img src="pics/gnm15.png" style="float: left"></td>

<td><img src="pics/gnm16.png" style="float: left"></td>
</tr>
</table>


####Minimum Kapsayan Ağaç(Devamı)

Minimum kapsayan ağaç bulmak için çeşitli algoritmalar vardır. Bunlardan en ünlü olan bazılar aşağıdakilerdir: 

- Prim Algoritması
- Kruskal Algoritması
- Boruvka(Sollin) Algoritması


####Prim Algoritması

Bu algoritma 1930 yılında matematikçi Vojtech Jarnik tarafından bulunmuştur. Daha sonra bağımsız olarak 1957'de bilgisayar bilimcisi Robert C. Prim ve 1959'da Dijkstra tarafından tekrar bulunmuştur. 

 1. Herhangi bir düğümi seç
 2. Bu düğüme bağlı olan en kısa kenarı seç
 3. Elimizde var olan bağlı düğümlerin birine bağlı olan en kısa kenarı seç
 4. Düğümler birbirlerine bağlı olana kadar 3.Adımı tekrarla
####Prim Algoritması(Devamı)

<img src="pics/o.png" style="float: center" width=400 height=336>


####Prim Algoritması(Devamı)

<img src="pics/p1.png" style="float: center" width=400 height=336>

####Prim Algoritması(Devamı)

<img src="pics/p2.png" style="float: center" width=400 height=336>

####Prim Algoritması(Devamı)

<img src="pics/p3.png" style="float: center" width=400 height=336>

####Prim Algoritması(Devamı)

<img src="pics/p4.png" style="float: center" width=400 height=336>

####Prim Algoritması(Devamı)

<img src="pics/p5.png" style="float: center" width=400 height=336>

####Prim Algoritması(Devamı)

<img src="pics/p6.png" style="float: center" width=400 height=336>

####Prim Algoritması(Devamı)

<img src="pics/p7.png" style="float: center" width=400 height=336>


####Kruskal Algoritması

Kruskal algoritması Joseph Kruskal tarafından geliştirilmiş ve ilk kez 1956 yılında anlatılmıştır. 
Kruskal algoritması her seferinde en iyi kenarın seçilmesi esasına dayalıdır.


- n kenarlı bir graf için herhangi bir düğümle başlanır ve en kısa yol buna eklenir. 
- Döngü oluşturmayacak şekilde (n-1) kenar eklenene kadar devam edilir. 
- Aynı değerli kenarlarda seçim keyfi yapılabilir.
- Düğümlerin birleştirilme işlemine en az maliyetli kenardan başlanır, kalan kenarlar arasından en az maliyetlisi seçilerek devam edilir.


####Kruskal Algoritması(Devamı)

<img src="pics/o.png" style="float: center" width=400 height=336>


####Kruskal Algoritması(Devamı)

<img src="pics/k1.png" style="float: center" width=400 height=336>


####Kruskal Algoritması(Devamı)

<img src="pics/k2.png" style="float: center" width=400 height=336>


####Kruskal Algoritması(Devamı)

<img src="pics/k3.png" style="float: center" width=400 height=336>

####Kruskal Algoritması(Devamı)

<img src="pics/k4.png" style="float: center" width=400 height=336>

####Kruskal Algoritması(Devamı)

<img src="pics/k5.png" style="float: center" width=400 height=336>

####Kruskal Algoritması(Devamı)

<img src="pics/k6.png" style="float: center" width=400 height=336>

####Kruskal Algoritması(Devamı)

```python 
def kruskal(graph):
    for vertice in graph['vertices']:
	make_set(vertice)
	minimum_spanning_tree = set()
	edges = list(graph['edges'])
	edges.sort()
	#print edges
    for edge in edges:
	weight, vertice1, vertice2 = edge
	if find(vertice1) != find(vertice2):
	    union(vertice1, vertice2)
	    minimum_spanning_tree.add(edge)
	    
    return sorted(minimum_spanning_tree)
```
####Prim ve Kruskal Algoritmaları

- Prim ve Kruskal Algoritmalarının ikisi de her zaman aynı uzunluktaki sonucu verecektir.

- Bu algoritmalar minimum kapsayan ağaç oluştururken, genelde kenarları farklı sırayla seçmektedir.

- Bazen ise farklı kenarları da seçebilirler. Örneğin, kenar maaliyetleri aynı olduğu zaman.

####Kaynaklar

- https://en.wikipedia.org/wiki/Graph
- https://en.wikipedia.org/wiki/Kruskal%27s_algorithm
- https://tr.wikipedia.org/wiki/Prim_algoritmas%C4%B1
- http://www.stoimen.com/blog/2012/11/19/computer-algorithms-prims-minimum-spanning-tree/
-https://www.youtube.com/watch?v=8fJgkVpxbQg
- https://www.youtube.com/watch?v=5XkK88VEILk
- https://www.youtube.com/watch?v=Pn874kEc3IA
- https://github.com/israelst/Algorithms-Book--Python/blob/master/5-Greedy-algorithms/kruskal.py


####Minimum Kapsayan Ağaçlar

- Dikkatiniz için Teşekkürler...
- Sorular???
<img src="r.png" style="float: center">


####Küçük Test

- Soru1: Aşağıdakilerden hangisi Minimum Kapsayan Ağaç oluşturabilmek için gerekli bir graf özelliğidir? Graf nasıl bir Graf olmalı?<br>
 <br>
 a) Bağlı olmayan bir Graf<br> 
 <br>
 b) Ağırlıklı bir Graf<br>
 <br>
 c) Döngülü bir Graf<br>
 <br>
 d) Ağırlıksız bir Graf<br>
 <br>
 e) Yönlü bir Graf<br>

####Küçük Test

- Soru2: Aşağıdakilerden hangisi Ağaçtır?<br>
<table>
<tr>
<td>1.resim</td>
<td>2.resim</td>
<td>3.resim</td>
</tr>
<tr>
<td><img src="pics/r1.png" style="float: center" width=75 height=75></td>
<td><img src="pics/r2.png" style="float: center" width=75 height=75></td>
<td><img src="pics/r3.png" style="float: center" width=75 height=75></td>
</tr>
<tr>
<td>4.resim</td>
<td>5.resim</td>
<td>6.resim</td>
</tr>
<tr>
<td><img src="pics/r4.png" style="float: center" width=75 height=75></td>
<td><img src="pics/r5.gif" style="float: center" width=75 height=75></td>
<td><img src="pics/r6.gif" style="float: center" width=75 height=75></td>
</tr>
</table>
 a) 1-2-3 <br> b) 2-3-4 <br> c) 3-4-5 <br> d) 4-5-6 <br> e) 2-3-6

####Küçük Test

- Soru3: Aşağıdakilerden hangisi yanlıştır?<br>
 <br>
 a) Prim algoritması Kruskal algoritmasının seçtiği kenarın aynısını seçmektedir.<br> 
 <br>
 b) Prim ve Kruskal Algoritmalarının ikisi de her zaman aynı uzunluktaki sonucu verecektir<br>
 <br>
 c) Kruskal algoritması her seferinde en iyi kenarın seçilmesi esasına dayalıdır.<br>
 <br>
 d) Prim algoritması matematikçi Vojtech Jarnik tarafından bulunmuştur.
 <br>
 e) Kruskal algoritması Joseph Kruskal tarafından geliştirilmiştir.

####Küçük Test Cevap Anahtarı
- Cevap1: b) Ağırlıklı bir Graf<br>
- Cevap2: a) 1-2-3<br>
- Cevap3: a) Prim algoritması Kruskal algoritmasının seçtiği kenarın aynısını seçmektedir.<br>
